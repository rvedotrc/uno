#!/usr/bin/perl
# vi: set ts=4 sw=4 :

use warnings;
use strict;

use lib "lib";

select STDERR; $| = 1;
select STDOUT; $| = 1;

use Uno::Game;

my $g;

{
	my @players = map { Uno::Player->new({ name => $_ }) }
		"Alice",
		"Bob",
		"Charles",
		"Diana",
		"Edward",
		# "Fiona",
		# "Gary",
		# "Helen",
		;

	$g = Uno::Game->new({ players => \@players });
}

while (not $g->game_over) {
	$g->play_next_turn_with_callback(\&pick_card_to_play);
}

$g->end_of_game;

exit;

sub pick_card_to_play {
	my @map = @{ shift() };
	my $can_pass = shift;

	my @playable = map { $_->[0] } grep { $_->[1] } @map;
	my @unplayable = map { $_->[0] } grep { !$_->[1] } @map;

	# Something is playable
	# TODO improve this :-)
	@playable = sort { $a->score_value <=> $b->score_value } @playable;
	my $play = $playable[-1];

	# TODO improve this
	my $col;
	if ($play->is_colour_change) {
		my %n;
		++$n{ $_->colour_of } for grep { not $_->is_colour_change } (@playable, @unplayable);
		my @c = sort { $n{$a} <=> $n{$b} } keys %n;
		$col = $c[-1] || 'r';
	}

	return ($play, $col);
}

# eof play
